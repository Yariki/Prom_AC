//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Core Model
//  @ File Name : portsettingsreader.cpp
//  @ Date : 4/12/2013
//  @ Author : 
//
//

#include <QtCore/QFile>
#include "portsettingsreader.h"
#include "portsettings.h"

PortSettingsReader::PortSettingsReader()
	:m_isReady(false),m_PortSettings(nullptr)
{
}

PortSettingsReader::PortSettingsReader(QString filename)
	:m_isReady(false),m_PortSettings(nullptr)
{
	m_Filename = filename;
}

PortSettingsReader::~PortSettingsReader()
{
	if(m_PortSettings != nullptr)
		delete m_PortSettings;
}


void PortSettingsReader::readSettings()
{
	if(m_Filename.isEmpty())
		return;
	QFile file(m_Filename);
	if(!file.exists())
	{
		qDebug("File doen't exist");
		return;
	}
	
	if(!file.open(QFile::ReadOnly | QFile::Text))
	{
		qDebug("Open file error");
		return;
	}
	parseSettings(&file);
}

void PortSettingsReader::readSettings(QString filename)
{
	m_Filename = filename;
	readSettings();
}

const PortSettings* PortSettingsReader::getSettings()
{
	return m_PortSettings;
}


void PortSettingsReader::parseSettings(QIODevice *device)
{
	QString errorStr;
	int errorLine;
	int errorColumn;
	if(!m_QDomDocument.setContent(device,true,&errorStr,&errorLine,&errorColumn))
	{
		return;
	}
	QDomElement root = m_QDomDocument.documentElement();
	if(root.tagName() != PORTSETTINGS || !root.hasChildNodes())
	{
		return;
	}
	m_PortSettings = new PortSettings();
	parse(&root);
	m_isReady = true;
}

void PortSettingsReader::parse(QDomElement *root)
{
	if(root == nullptr)
		return;
	QDomNode node = root->firstChild();
	while(!node.isNull())
	{
		QDomElement el = node.toElement();
		if(el.isNull())
		{
			node = node.nextSibling();
			continue;
		}
		if(el.tagName() == MODE)
		{
			QString val = el.attribute(VALUE);
			m_PortSettings->setIOMode((QIODevice::OpenMode)val.toInt());
		}
		else if(el.tagName() == RATE)
		{
			QString val = el.attribute(VALUE);
			m_PortSettings->setRate(val.toInt());
		}
		else if(el.tagName() == DATABITS)
		{
			QString val = el.attribute(VALUE);
			m_PortSettings->setDataBits(val.toInt());
		}
		else if(el.tagName() == PARITY)
		{
			QString val = el.attribute(VALUE);
			m_PortSettings->setParity(val.toInt());
		}
		else if(el.tagName() == STOPBITS)
		{
			QString val = el.attribute(VALUE);
			m_PortSettings->setStopBits(val.toInt());
		}
		else if(el.tagName() == FLOWCONTROL)
		{
			QString val = el.attribute(VALUE);
			m_PortSettings->setFlowControl(val.toInt());
		}
		else if(el.tagName() == PORT)
		{
			QString val = el.attribute(VALUE);
			m_PortSettings->setPort(val);
		}
		node = node.nextSibling();
	}
}
