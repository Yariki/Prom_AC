//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Core Model
//  @ File Name : PolygonSvgObject.cpp
//  @ Date : 3/25/2013
//  @ Author : 
//
//

#include <QStringList>
#include "PolygonSvgObject.h"

PolylineSvgObject::PolylineSvgObject()
{
	m_type = SvgObjectType::PolygonSvg;
}

PolylineSvgObject::~PolylineSvgObject()
{

}

int PolylineSvgObject::getPointCount()
{
	return m_points.size();
}

QPoint PolylineSvgObject::getPoint(int index)
{
	return index > -1 && index < m_points.size() ? m_points.at(index) : QPoint(-1,-1);
}

void PolylineSvgObject::Parse(QDomElement &element)
{
	QDomNamedNodeMap mapAttr = element.attributes();
	for(int i = 0; i < mapAttr.count();i++)
	{
		QDomAttr attr = mapAttr.item(i).toAttr();
		if(attr.isNull())
			continue;
		if(attr.name() == "points")
		{
			ParsePoints(attr.value());
		}
	}
}

QString PolylineSvgObject::toString()
{
	return QString("count=%1").arg(m_points.size());
}

void PolylineSvgObject::ParsePoints(QString points)
{
	if(points.length() == 0)
		return;
	QStringList listPair = points.split(" ");
	if(listPair.count() > 0)
	{
		for (int i = 0; i < listPair.count(); i++)
		{
			QString val = listPair.at(i);
			QStringList lPoins = val.split(",");
			if(lPoins.count() == 2)
			{
				int x = lPoins.at(0).toInt();
				int y = lPoins.at(1).toInt();
				m_points.push_back(QPoint(x,y));
			}
		}
	}
}

void PolylineSvgObject::render(QPainter *canvas)
{
	if(getPointCount() > 0)
	{
		canvas->drawPolyline(&m_points.at(0),getPointCount());
	}
}
